C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE HANDGESTURE
OBJECT MODULE PLACED IN .\Objects\handgesture.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE ..\src\lib\handgesture.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND
                    - PRINT(.\Listings\handgesture.lst) TABS(5) OBJECT(.\Objects\handgesture.obj)

line level    source

   1          
   2          #include "..\include_s.h"
   3          
   4          
   5          #define HAND_WAIT    0
   6          #define HAND_ERROR   1
   7          
   8          #define Invilid_tmr     50         //????(500ms):???????????,?????????????,?????????,??????
   9          #define Error_tmr       1000        //????(10s):??????????????????,????????????????
  10          
  11          Hand_Inst_t hg;
  12          HAND_t  hand_task;
  13          GESTURE_CHECK_t gc_left,gc_right;
  14          
  15          void handtube_ctrl(void)
  16          {
  17   1         //static u8 wave_ct = 0;
  18   1                static u8 hand0_ct = 0;
  19   1           
  20   1                static u8 hand1_ct = 0;
  21   1           
  22   1                     if (hand_task.mode)
  23   1                     {
  24   2                          if(hand0_ct++>=7)
  25   2                          {
  26   3                               hand0_ct = 0;
  27   3                               Enable_PWM0;
  28   3                          }
  29   2                          else
  30   2                          {
  31   3                               Disable_PWM0;
  32   3                               PIN_send1 = 0;
  33   3                          }
  34   2                          
  35   2                          if(hand1_ct++>=7)
  36   2                          {
  37   3                               hand1_ct = 0;
  38   3                               INSCON |= bit01000000;
  39   3                               Enable_PWM1;
  40   3                               INSCON &= bit10111111;
  41   3                          }
  42   2                          else
  43   2                          {
  44   3                               INSCON |= bit01000000;
  45   3                               Disable_PWM1;
  46   3                               INSCON &= bit10111111;
  47   3                               PIN_send2 = 0;
  48   3                          }
  49   2                          
  50   2                     }
  51   1      }
  52          
  53          /****************************************
  54           * ???:   update_hand_gesture 
C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 2   

  55           * ??:    ????
  56           * ??:    --
  57           * ??:    --
  58           ****************************************/
  59          void update_hand_gesture(void)//100us
  60          {
  61   1                if (!hand_task.mode)    return;
  62   1                
  63   1                if(gc_left.rise_flag)                   //上升沿标志位开启，计算高电平时间
  64   1                {
  65   2                     gc_left.high_ct++;
  66   2                     if(gc_left.high_ct>=50)            //超过50*100us=5ms清0说明手势结束了
  67   2                     {
  68   3                          gc_left.rise_flag = 0;
  69   3                          gc_left.high_ct = 0;
  70   3                          hand_task.Left_status = 0;
  71   3                     }
  72   2                }
  73   1                
  74   1                if(gc_left.fall_flag)                             //下降沿标志位开启，计算低电平时间
  75   1                {
  76   2                     gc_left.low_ct++;
  77   2                }
  78   1                
  79   1                if((gc_left.rise_ct == 2) && (gc_left.fall_ct == 2) )       //上升沿和下降沿皆为2个后 则为完整的低高低信号
  80   1                {
  81   2                     gc_left.rise_ct = 0;
  82   2                     gc_left.fall_ct = 0;
  83   2                     
  84   2                     if( (gc_left.L1>=3)&&(gc_left.L1 <=7) && (gc_left.H2>=30)&&(gc_left.H2<=40) && (gc_left.L3>=3)&&(gc_lef
             -t.L3<=7) )          //低高低的长度在范围内 则触发手势
  85   2                     {
  86   3                          hand_task.Left_status = 1;
  87   3                     }
  88   2                     else
  89   2                     {
  90   3                          gc_left.L1 = 0;
  91   3                          gc_left.H2 = 0;
  92   3                          gc_left.L3 = 0;
  93   3                     }
  94   2                }
  95   1                
  96   1                if (PIN_recvL)                                         //检测到高电平
  97   1                {
  98   2                     gc_left.rise_cn = 1;
  99   2                     if(gc_left.fall_cn)                          //为上升沿 上升沿标志位开启 ，下降沿标志位关闭 ，取低电平的长度
 100   2                     {
 101   3                          gc_left.high_ct = 0;
 102   3                          gc_left.fall_cn = 0;
 103   3                          gc_left.rise_flag = 1;
 104   3                          gc_left.fall_flag = 0;
 105   3                          
 106   3                          if(gc_left.rise_ct>2)
 107   3                               gc_left.rise_ct = 0;
 108   3                          else
 109   3                               gc_left.rise_ct++;
 110   3                          
 111   3                          if(gc_left.rise_ct == 1)                     //把低电平第一段时间取出来
 112   3                               gc_left.L1 = gc_left.low_ct;
 113   3                          else if(gc_left.rise_ct == 2)           //把低电平第二段时间取出来
 114   3                               gc_left.L3 = gc_left.low_ct;
 115   3                          /*if(i<=7)
C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 3   

 116   3                          {
 117   3                               i++;
 118   3                               temp[i] = gesture_check->low_ct;
 119   3                          }*/
 120   3                     }
 121   2                }
 122   1                else                                                                       //检测到低电平
 123   1                {
 124   2                     gc_left.fall_cn = 1;
 125   2                     
 126   2                     if(gc_left.rise_cn)                               //为下降沿     下降沿标志位开启，上升沿标志位关闭，取高电平的长度
 127   2                     {
 128   3                          gc_left.low_ct = 0;
 129   3                          gc_left.rise_cn= 0;
 130   3                          gc_left.H2 = gc_left.high_ct;
 131   3                          gc_left.fall_flag = 1;
 132   3                          gc_left.rise_flag = 0;
 133   3                          if(gc_left.fall_ct>2)
 134   3                               gc_left.fall_ct = 0;
 135   3                          else
 136   3                               gc_left.fall_ct++;
 137   3                     }
 138   2      
 139   2                }
 140   1                
 141   1                if(gc_right.rise_flag)                            //上升沿标志位开启，计算高电平时间
 142   1                {
 143   2                     gc_right.high_ct++;
 144   2                     if(gc_right.high_ct>=50)           //超过50*100us=5ms清0说明手势结束了
 145   2                     {
 146   3                          gc_right.rise_flag = 0;
 147   3                          gc_right.high_ct = 0;
 148   3                          hand_task.Right_status = 0;
 149   3                     }
 150   2                }
 151   1                
 152   1                if(gc_right.fall_flag)                            //下降沿标志位开启，计算低电平时间
 153   1                {
 154   2                     gc_right.low_ct++;
 155   2                }
 156   1                
 157   1                if((gc_right.rise_ct == 2) && (gc_right.fall_ct == 2) )          //上升沿和下降沿皆为2个后 则为完整的低高低信号
 158   1                {
 159   2                     gc_right.rise_ct = 0;
 160   2                     gc_right.fall_ct = 0;
 161   2                     
 162   2                     if( (gc_right.L1>=3)&&(gc_right.L1 <=7) && (gc_right.H2>=30)&&(gc_right.H2<=40) && (gc_right.L3>=3)&&(g
             -c_right.L3<=7) )        //低高低的长度在范围内 则触发手势
 163   2                     {
 164   3                          hand_task.Right_status = 1;
 165   3                     }
 166   2                     else
 167   2                     {
 168   3                          gc_right.L1 = 0;
 169   3                          gc_right.H2 = 0;
 170   3                          gc_right.L3 = 0;
 171   3                     }
 172   2                }
 173   1                
 174   1                if (PIN_recvR)                                         //检测到高电平
 175   1                {
 176   2                     gc_right.rise_cn = 1;//上升沿
C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 4   

 177   2                     if(gc_right.fall_cn)                              //为上升沿 上升沿标志位开启 ，下降沿标志位关闭 ，取低电平的长度
 178   2                     {
 179   3                          gc_right.high_ct = 0;
 180   3                          gc_right.fall_cn = 0;
 181   3                          gc_right.rise_flag = 1;
 182   3                          gc_right.fall_flag = 0;
 183   3                          
 184   3                          if(gc_right.rise_ct>2)
 185   3                               gc_right.rise_ct = 0;
 186   3                          else
 187   3                               gc_right.rise_ct++;
 188   3                          
 189   3                          if(gc_right.rise_ct == 1)                         //把低电平第一段时间取出来
 190   3                               gc_right.L1 = gc_right.low_ct;
 191   3                          else if(gc_right.rise_ct == 2)               //把低电平第二段时间取出来
 192   3                               gc_right.L3 = gc_right.low_ct;
 193   3                          /*if(i<=7)
 194   3                          {
 195   3                               i++;
 196   3                               temp[i] = gesture_check->low_ct;
 197   3                          }*/
 198   3                     }
 199   2                }
 200   1                else                                                                       //检测到低电平
 201   1                {
 202   2                     gc_right.fall_cn = 1;
 203   2                     
 204   2                     if(gc_right.rise_cn)                                   //为下降沿     下降沿标志位开启，上升沿标志位关闭，取高电平的长度
 205   2                     {
 206   3                          gc_right.low_ct = 0;
 207   3                          gc_right.rise_cn= 0;
 208   3                          gc_right.H2 = gc_right.high_ct;
 209   3                          gc_right.fall_flag = 1;
 210   3                          gc_right.rise_flag = 0;
 211   3                          if(gc_right.fall_ct>2)
 212   3                               gc_right.fall_ct = 0;
 213   3                          else
 214   3                               gc_right.fall_ct++;
 215   3                     }
 216   2      
 217   2                }
 218   1      }
 219          
 220          /****************************************
 221           * ???:   hand_gesture_init 
 222           * ??:    ?????
 223           * ??:    Hand_Inst_t?? 
 224           * ??:    --
 225           ****************************************/
 226          void hand_gesture_init(Hand_Inst_t * hg)
 227          {
 228   1          hg->hand_interval = 0;
 229   1          hg->hand_keep_ct = 0;
 230   1          hg->hand_state = 0;
 231   1          hg->hand_value = 0;
 232   1      }
 233          
 234          /****************************************
 235           * ???:   hand_up_deal 
 236           * ??:    ??????
 237           * ??:    Hand_Inst_t?? 
 238           * ??:    --
C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 5   

 239           ****************************************/
 240          static void hand_up_deal(Hand_Inst_t * hg)
 241          {
 242   1           if (hg->hand_keep_ct >= HDS3D0SEC)                
 243   1                hg->hand_state = shand_long_up;                   //??3?,????
 244   1           else if(hg->hand_keep_ct < HDS3D0SEC)
 245   1                hg->hand_state = shand_short_up;            //??3?,????
 246   1      
 247   1           hg->hand_keep_ct = 0;                                  
 248   1      }
 249          
 250          /****************************************
 251           * ???:   hand_time_count 
 252           * ??:    ??????
 253           * ??:    Hand_Inst_t?? 
 254           * ??:    --
 255           ****************************************/
 256          void hand_time_count(Hand_Inst_t * hg)
 257          {   
 258   1           hg->hand_keep_ct++;                                    
 259   1           hg->hand_interval++;
 260   1      
 261   1           switch (hg->hand_keep_ct)
 262   1           {
 263   2                case 1:
 264   2                     hg->hand_state = shand_new;                  //??
 265   2                     break;
 266   2      
 267   2          case HDS1D0SEC:
 268   2                     hg->hand_state = shand_1s_dn;           //??1s
 269   2                     break;
 270   2                
 271   2          case HDS1D5SEC:
 272   2                     hg->hand_state = shand_1s5_dn;               //??1.5s
 273   2                     break;
 274   2      
 275   2                default:
 276   2            if (hg->hand_keep_ct > 500)
 277   2                          hg->hand_keep_ct = 500;               //
 278   2           }
 279   1      }
 280          
 281          
 282          u8 hand_scan(void)
 283          {
 284   1          static u16 clear_wait_tmr = 0;
 285   1          static u8  first_one = 0;       //1:??????,2:??????
 286   1          static u8  gesture = 0;
 287   1          static u16 err_tmr = 0;
 288   1          static u8  shake_ct = 0;
 289   1          
 290   1          u16_dn(&clear_wait_tmr);
 291   1          
 292   1          if (hand_task.Left_status && hand_task.Right_status && !first_one)//左右手势都有第一次进入
 293   1          {
 294   2              first_one = 3;
 295   2              clear_wait_tmr = Invilid_tmr;
 296   2          }
 297   1          
 298   1          if (hand_task.Left_status)
 299   1          {
 300   2               if (!hand_task.Right_status)
C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 6   

 301   2               {
 302   3                  if (first_one == 2 && clear_wait_tmr)
 303   3                  {
 304   4                      gesture = hand_left;
 305   4                  }
 306   3                  else if (first_one != 3)
 307   3                  {
 308   4                      first_one = 1;
 309   4                  }
 310   3               }
 311   2                          
 312   2               clear_wait_tmr = Invilid_tmr;
 313   2          }
 314   1          else if (first_one == 3 && hand_task.Right_status && clear_wait_tmr)
 315   1          {
 316   2              gesture = hand_right;
 317   2          }
 318   1          
 319   1      
 320   1          if (hand_task.Right_status)
 321   1          {
 322   2                      if (!hand_task.Left_status)
 323   2                      {
 324   3                               if (first_one == 1 && clear_wait_tmr)
 325   3                               {
 326   4                                         gesture = hand_right;
 327   4                               }
 328   3                               else if (first_one != 3)
 329   3                               {
 330   4                                         first_one = 2;
 331   4                               }
 332   3                      }
 333   2              
 334   2             clear_wait_tmr = Invilid_tmr;
 335   2                      
 336   2          }
 337   1          else if (first_one == 3 && hand_task.Left_status && clear_wait_tmr)
 338   1          {
 339   2              gesture = hand_left;
 340   2          }
 341   1      
 342   1          // if (!clear_wait_tmr)
 343   1          // {
 344   1          //     first_one = 0;
 345   1          // }
 346   1          
 347   1          if (!(hand_task.Left_status || hand_task.Right_status))//左右手势都没有为真
 348   1          {
 349   2              u8_up(&shake_ct);          //消抖两次
 350   2              if (shake_ct > 2)
 351   2              {
 352   3                  if (gesture)
 353   3                  {
 354   4                      first_one = 0;
 355   4                  }
 356   3                  
 357   3                  gesture = 0;
 358   3                  err_tmr = 0;
 359   3              }
 360   2          }
 361   1          else
 362   1          {
C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 7   

 363   2              shake_ct = 0;
 364   2              u16_up(&err_tmr);
 365   2              if (err_tmr > Error_tmr)
 366   2              {
 367   3                  gesture = shand_err;
 368   3                  first_one = 0;
 369   3              }
 370   2          }
 371   1      
 372   1          return gesture;
 373   1      }
 374          
 375          bool hand_gesture_scan(Hand_Inst_t * hg)
 376          {
 377   1          static  u8 old_scan_v = shand_none;
 378   1          static  u8 old_hand_v = shand_none;
 379   1          static  u8 scan_status = HAND_WAIT;
 380   1      
 381   1          unsigned char scanvaltmp;
 382   1      
 383   1          scanvaltmp = hand_scan();
 384   1      
 385   1          if (old_scan_v != scanvaltmp)
 386   1          {
 387   2              old_scan_v = scanvaltmp;
 388   2              return false;
 389   2          }
 390   1          
 391   1          if (scan_status == HAND_ERROR)
 392   1          {
 393   2              old_hand_v = shand_none;
 394   2              if (scanvaltmp == shand_none)
 395   2                  scan_status = HAND_WAIT;
 396   2              
 397   2              goto nohand;
 398   2          }
 399   1          
 400   1          if ((scanvaltmp == shand_none)&&(old_hand_v == shand_none))
 401   1          {
 402   2          nohand:
 403   2              hg->hand_value = shand_none;
 404   2              hg->hand_state = shand_none;
 405   2              hg->hand_interval = 0;
 406   2              hg->hand_keep_ct = 0;
 407   2              return false;
 408   2          }
 409   1      
 410   1          if (scanvaltmp == shand_err)
 411   1          {
 412   2              scan_status = HAND_ERROR;
 413   2                old_hand_v = shand_none;
 414   2              return false;
 415   2          }
 416   1          
 417   1          
 418   1          if (scanvaltmp == shand_none)
 419   1          {
 420   2              hg->hand_value = old_hand_v;
 421   2              old_hand_v = shand_none;
 422   2              //hand_up_deal(hg);
 423   2              return false;
 424   2          }
C51 COMPILER V9.54   HANDGESTURE                                                           08/31/2022 15:02:56 PAGE 8   

 425   1          
 426   1          if (scanvaltmp != old_hand_v)
 427   1          {
 428   2              hg->hand_keep_ct = 0;
 429   2              hg->hand_value = old_hand_v = scanvaltmp;
 430   2              hand_time_count(hg);
 431   2          }
 432   1          else
 433   1          {
 434   2              hand_time_count(hg);
 435   2          }
 436   1          
 437   1          return true;
 438   1      }
 439          
 440          
 441          
 442          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1280    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     57       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
