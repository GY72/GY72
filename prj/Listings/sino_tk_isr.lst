C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE SINO_TK_ISR
OBJECT MODULE PLACED IN .\Objects\sino_tk_isr.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE ..\src\sino_touchkey\Lib\sino_tk_isr.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBU
                    -G OBJECTEXTEND PRINT(.\Listings\sino_tk_isr.lst) TABS(5) OBJECT(.\Objects\sino_tk_isr.obj)

line level    source

   1          #include "../Lib/sino_touchkey.h"
   2          #include "../Inc/mcu_sys_regsiter.h"  
   3          #include "intrins.h"
   4          
   5          U8  xdata  Add_function ;     
   6          U8  xdata  Add_Set ;               
   7          //-----------------------------
   8          bit  Duijiangji_flag;
   9          U8   xdata  DuiReaCnt;
  10          U8   xdata  Dui_num;
  11          U8   xdata  L_Inter1;
  12          U8   xdata  L_Inter2;
  13          //-----------------------------基线复位计数
  14          U16 xdata  key_stablecNT[KEY_NUMBER1];
  15          U8  xdata  stable_limit1;
  16          U16 xdata  STcnt_One;
  17          U16 xdata  STcnt_Two;
  18          //------------------------------------
  19          U8  xdata  FLAG_COUNT_set;
  20          U8  xdata  normal_jitter_set;
  21          U8  xdata  init_BaseCnt_set;
  22          U8  xdata  key_fastcounter;             //基线快跟
  23          U8  xdata  key_stablecounter;
  24          U8  xdata  nake_count[KEY_NUMBER1]; //
  25          U16 xdata  nakevalue;                   //
  26          //------------------------------------
  27          bit CSI_flag ;
  28          bit   key_tkst_flag,key_tkst_flag_pre;
  29          bit   f_tkErr;
  30          U8  xdata   key_sample_count;
  31          U8  xdata   tk_num;
  32          U32  xdata  sino_key_value;
  33          U32  xdata  sino_key_value_pre;
  34          U16  xdata  key_tkerrCnt;
  35          U8  xdata   multikey_control;
  36          U8  xdata   multikey_control2;
  37          U8  xdata   multikey_control3;
  38          U16 xdata HF_key_baseline[KEY_NUMBER1];
  39          U16 xdata HF_key[KEY_NUMBER1];
  40          U16 xdata HF_key_filter[KEY_NUMBER1];
  41          U16 xdata HF_key_filter2[KEY_NUMBER1];
  42          U8   xdata HF_baseline_plus_flag[KEY_NUMBER1];
  43          U8   xdata HF_key_count_sub[KEY_NUMBER1];
  44          U32 xdata HF_keytouch_flag;   //
  45          U8   data  HF_CSI_cnt;
  46          
  47          U16 xdata LF_key_baseline[KEY_NUMBER1];
  48          U16 xdata LF_key[KEY_NUMBER1];
  49          U16 xdata LF_key_filter[KEY_NUMBER1];
  50          U16 xdata LF_key_filter2[KEY_NUMBER1];
  51          U8   xdata LF_baseline_plus_flag[KEY_NUMBER1]; //
  52          U8   xdata LF_key_count_sub[KEY_NUMBER1];      //
  53          U32 xdata LF_keytouch_flag; //
  54          U8   data  LF_CSI_cnt;
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 2   

  55          
  56          U8   xdata LF_key_count_fastsub[KEY_NUMBER1];  //高低频共用
  57          U8   xdata LF_key_flag[KEY_NUMBER1];                //高低频共用
  58          U8  xdata datasub_counter;
  59          U8  xdata dataplus_counter;
  60          U8  xdata line;  
  61          U8  xdata R_downCnt;
  62          U8  xdata R_downCnt2;
  63          U8  xdata R_maxlimit;
  64          U16 xdata R_nakelimit;
  65          U16 code  *key_max;
  66          U16 xdata *key_baseline;
  67          U16 code  *key_threshold;
  68          U16 xdata *key;
  69          U16 xdata *key_filter;
  70          U16 xdata *key_filter2;
  71          U8   xdata *key_flag;
  72          U8   xdata *baseline_plus_flag;
  73          U8   xdata *key_count_sub;
  74          U8   xdata *key_count_fastsub;
  75          U32 xdata *keytouch_flag;
  76          U8   data  *CSI_cnt;
  77          U8   xdata *stblecount;
  78          U8  xdata *R_DATA_RAM_ADDR;          
  79          bit   tkst_flag,tkst_flag_pre;
  80          bit  tk_init_req;
  81          bit  tk_adjust_flag,fre_switch_flag;
  82          
  83          bit   TK_GO_ERR_flag;
  84          bit   TK_Count_Over_flag;
  85          bit  TK_Data_Over_flag;
  86          bit  LED_Start_TK_Going_flag;
  87          bit   TK_going_flag;
  88          bit   TK_Scan_End_flag;
  89          
  90          #if chip_sel<L_chip_sel1XX
              #define   L_tkIntVec   0
              #elif chip_sel<L_chip_sel2XX
              #define   L_tkIntVec   1 //1622xx
              #else
  95          #define   L_tkIntVec   1 //326xx
  96          #endif
  97          ///////////////////////////////////////
  98          // Touch Key Interrupt 
  99          ///////////////////////////////////////
 100          void isr_TK (void) interrupt  L_tkIntVec
 101          {
 102   1             _push_(INSCON);
 103   1             INSCON=0X00;
 104   1             if(TK_Scan_is_End)                    //触摸扫描结束
 105   1             {
 106   2                CLR_ALL_TK_IF;                     //清触摸按键中断标志
 107   2                line++;
 108   2                if(line>=KEY_NUMBER1)
 109   2                {
 110   3                  line=0;
 111   3                  key_tkerrCnt = 0;
 112   3                  TK_Scan_End_flag = 1;
 113   3                }
 114   2                else
 115   2                {
 116   3                      if(tkst_flag == TKST_IS_High_Fre)
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 3   

 117   3                       {
 118   4                               TKST = HF_TKST;
 119   4                               TKDIV04 = (U8)(Tab_HF_DIV[line]>>8);   
 120   4                               TKDIV03 = (U8)(Tab_HF_DIV[line]);  
 121   4                       }
 122   3                       else
 123   3                       {
 124   4                               TKST = LF_TKST;
 125   4                               TKDIV04 = (U8)(Tab_LF_DIV[line]>>8);   
 126   4                               TKDIV03 = (U8)(Tab_LF_DIV[line]);               
 127   4                      }
 128   3                      DisTk();
 129   3                      EnTk(Tab_Chn[line]);
 130   3                      TK_GO;                        
 131   3               }
 132   2             }
 133   1             else
 134   1             {
 135   2                   if(tk_init_req)
 136   2                     {
 137   3                         key_tkerrCnt++;         //上电错误计数
 138   3                     }            
 139   2                     if(TK_Data_is_Over)           //运算结果溢出
 140   2                   {
 141   3                         TK_going_flag = 0;
 142   3                     TK_Data_Over_flag = 1;
 143   3                   }
 144   2                   else
 145   2                   {
 146   3                       if(TK_Count_is_Over)   //按键扫描计数溢出
 147   3                       {
 148   4                              TK_going_flag = 0;
 149   4                          TK_Count_Over_flag = 1;                 
 150   4                       }
 151   3                       else
 152   3                       {
 153   4                           if(TK_GO_is_ERR)   //启动信号错误
 154   4                           {
 155   5                                   TK_going_flag = 0;
 156   5                               TK_GO_ERR_flag = 1;                     
 157   5                           }
 158   4                       }
 159   3                   }
 160   2                     CLR_ALL_TK_IF;                          //清触摸按键中断标志
 161   2              }
 162   1      
 163   1           _pop_(INSCON);
 164   1      }
 165          
 166          //====================================================================
 167          //     触摸按键信道配置表
 168          //====================================================================
 169          U8  code  Tab_Chn[KEY_NUMBER1] = 
 170          {
 171          #if KEY_NUMBER1 >= 1
 172            #if chip_sel<L_chip_sel1XX
                      key0,
                #else
 175                 key0-1, 
 176            #endif
 177          #endif
 178          #if KEY_NUMBER1 >= 2
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 4   

 179            #if chip_sel<L_chip_sel1XX
                      key1,
                #else
 182                 key1-1, 
 183            #endif
 184          #endif
 185          #if KEY_NUMBER1 >= 3
 186            #if chip_sel<L_chip_sel1XX
                      key2,
                #else
 189                 key2-1, 
 190            #endif
 191          #endif
 192          #if KEY_NUMBER1 >= 4
 193            #if chip_sel<L_chip_sel1XX
                      key3,
                #else
 196                 key3-1, 
 197            #endif
 198          #endif
 199          #if KEY_NUMBER1 >= 5
 200            #if chip_sel<L_chip_sel1XX
                      key4,
                #else
 203                 key4-1, 
 204            #endif
 205          #endif
 206          #if KEY_NUMBER1 >= 6
 207             #if chip_sel<L_chip_sel1XX
                      key5,
                #else
 210                 key5-1, 
 211            #endif
 212          #endif
 213          #if KEY_NUMBER1 >= 7
 214            #if chip_sel<L_chip_sel1XX
                      key6,
                #else
 217                 key6-1, 
 218            #endif
 219          #endif
 220          #if KEY_NUMBER1 >= 8
 221            #if chip_sel<L_chip_sel1XX
                      key7,
                #else
 224                 key7-1, 
 225            #endif
 226          #endif
 227          #if KEY_NUMBER1 >= 9
 228            key8-1,
 229          #endif
 230          #if KEY_NUMBER1 >= 10
 231            key9-1,
 232          #endif
 233          #if KEY_NUMBER1 >= 11
 234            key10-1,
 235          #endif
 236          #if KEY_NUMBER1 >= 12
 237            key11-1,
 238          #endif
 239          #if KEY_NUMBER1 >= 13
 240            key12-1,
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 5   

 241          #endif
 242          #if KEY_NUMBER1 >= 14
 243            key13-1,
 244          #endif
 245          #if KEY_NUMBER1 >= 15
 246            key14-1,
 247          #endif
 248          #if KEY_NUMBER1 >= 16
 249            key15-1,
 250          #endif
 251          #if KEY_NUMBER1 >= 17
                key16-1,
              #endif
 254          #if KEY_NUMBER1 >= 18
                key17-1,
              #endif
 257          #if KEY_NUMBER1 >= 19
                key18-1,
              #endif
 260          #if KEY_NUMBER1 >= 20
                key19-1,
              #endif
 263          #if KEY_NUMBER1 >= 21
                key20-1,
              #endif
 266          #if KEY_NUMBER1 >= 22
                key21-1,
              #endif
 269          #if KEY_NUMBER1 >= 23
                key22-1,
              #endif
 272          #if KEY_NUMBER1 >= 24
                key23-1,
              #endif  
 275          };
 276          //====================================================================
 277          //     触摸按键最大差值配置表
 278          //====================================================================
 279          U16 code  HF_key_max[KEY_NUMBER1] = 
 280          {
 281            #if KEY_NUMBER1 >= 1
 282              HF_diff0 ,  //key0
 283            #endif
 284            #if KEY_NUMBER1 >= 2
 285              HF_diff1 ,  //key1
 286            #endif
 287            #if KEY_NUMBER1 >= 3
 288              HF_diff2 ,  //key2
 289            #endif
 290            #if KEY_NUMBER1 >= 4
 291              HF_diff3 ,  //key3
 292            #endif
 293            #if KEY_NUMBER1 >= 5
 294              HF_diff4 ,  //key4
 295            #endif
 296            #if KEY_NUMBER1 >= 6
 297              HF_diff5 ,  //key5
 298            #endif
 299            #if KEY_NUMBER1 >= 7
 300              HF_diff6 ,  //key6
 301            #endif
 302            #if KEY_NUMBER1 >= 8
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 6   

 303              HF_diff7 ,  //key7
 304            #endif
 305            #if KEY_NUMBER1 >= 9
 306              HF_diff8 ,  //key8
 307            #endif
 308            #if KEY_NUMBER1 >= 10
 309              HF_diff9 ,  //key9
 310            #endif
 311            #if KEY_NUMBER1 >= 11
 312              HF_diff10,  //key10
 313            #endif
 314            #if KEY_NUMBER1 >= 12
 315              HF_diff11,  //key11
 316            #endif
 317            #if KEY_NUMBER1 >= 13
 318              HF_diff12,  //key12
 319            #endif
 320            #if KEY_NUMBER1 >= 14
 321              HF_diff13,  //key13
 322            #endif
 323            #if KEY_NUMBER1 >= 15
 324              HF_diff14,  //key14
 325            #endif
 326            #if KEY_NUMBER1 >= 16
 327              HF_diff15,  //key15
 328            #endif
 329            #if KEY_NUMBER1 >= 17
                  HF_diff16,  //key16
                #endif
 332            #if KEY_NUMBER1 >= 18
                  HF_diff17,  //key17
                #endif
 335            #if KEY_NUMBER1 >= 19
                  HF_diff18,  //key18
                #endif
 338            #if KEY_NUMBER1 >= 20
                  HF_diff19,  //key19
                #endif
 341            #if KEY_NUMBER1 >= 21
                  HF_diff20,  //key20
                #endif
 344            #if KEY_NUMBER1 >= 22
                  HF_diff21,  //key21
                #endif
 347            #if KEY_NUMBER1 >= 23
                  HF_diff22,  //key22
                #endif
 350            #if KEY_NUMBER1 >= 24
                  HF_diff23,  //key23
                #endif
 353          };
 354          //--------------------------------------------------------------------
 355          //     
 356          //--------------------------------------------------------------------
 357          U16 code  HF_key_threshold[KEY_NUMBER1] =
 358          {
 359            #if KEY_NUMBER1 >= 1
 360              (HF_diff0>>2)*Thrd_Per0/25,  //key0
 361            #endif
 362            #if KEY_NUMBER1 >= 2
 363              (HF_diff1>>2)*Thrd_Per1/25,  //key1
 364            #endif
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 7   

 365            #if KEY_NUMBER1 >= 3
 366              (HF_diff2>>2)*Thrd_Per2/25,  //key2
 367            #endif
 368            #if KEY_NUMBER1 >= 4
 369              (HF_diff3>>2)*Thrd_Per3/25,  //key3
 370            #endif
 371            #if KEY_NUMBER1 >= 5
 372              (HF_diff4>>2)*Thrd_Per4/25,  //key4
 373            #endif
 374            #if KEY_NUMBER1 >= 6
 375              (HF_diff5>>2)*Thrd_Per5/25,  //key5
 376            #endif
 377            #if KEY_NUMBER1 >= 7
 378              (HF_diff6>>2)*Thrd_Per6/25,  //key6
 379            #endif
 380            #if KEY_NUMBER1 >= 8
 381              (HF_diff7>>2)*Thrd_Per7/25,  //key7
 382            #endif
 383            #if KEY_NUMBER1 >= 9
 384              (HF_diff8>>2)*Thrd_Per8/25,  //key8
 385            #endif
 386            #if KEY_NUMBER1 >= 10
 387              (HF_diff9>>2)*Thrd_Per9/25,  //key9
 388            #endif
 389            #if KEY_NUMBER1 >= 11
 390              (HF_diff10>>2)*Thrd_Per10/25, //key10
 391            #endif
 392            #if KEY_NUMBER1 >= 12
 393              (HF_diff11>>2)*Thrd_Per11/25, //key11
 394            #endif
 395            #if KEY_NUMBER1 >= 13
 396              (HF_diff12>>2)*Thrd_Per12/25,  //key12
 397            #endif
 398            #if KEY_NUMBER1 >= 14
 399              (HF_diff13>>2)*Thrd_Per13/25,  //key13
 400            #endif
 401            #if KEY_NUMBER1 >= 15
 402              (HF_diff14>>2)*Thrd_Per14/25,  //key14
 403            #endif
 404            #if KEY_NUMBER1 >= 16
 405              (HF_diff15>>2)*Thrd_Per15/25,  //key15
 406            #endif
 407            #if KEY_NUMBER1 >= 17
                  (HF_diff16>>2)*Thrd_Per16/25,  //key16
                #endif
 410            
 411            #if KEY_NUMBER1 >= 18
                  (HF_diff17>>2)*Thrd_Per17/25,  //key17
                #endif
 414            #if KEY_NUMBER1 >= 19
                  (HF_diff18>>2)*Thrd_Per18/25,  //key18
                #endif
 417            #if KEY_NUMBER1 >= 20
                  (HF_diff19>>2)*Thrd_Per19/25,  //key19
                #endif
 420            #if KEY_NUMBER1 >= 21
                  (HF_diff20>>2)*Thrd_Per20/25,  //key20
                #endif
 423            #if KEY_NUMBER1 >= 22
                  (HF_diff21>>2)*Thrd_Per21/25,  //key21
                #endif
 426            #if KEY_NUMBER1 >= 23
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 8   

                  (HF_diff22>>2)*Thrd_Per22/25,  //key22
                #endif  
 429            #if KEY_NUMBER1 >= 24
                  (HF_diff23>>2)*Thrd_Per23/25,  //key23
                #endif       
 432          };
 433          //====================================================================
 434          //     LF_diff
 435          //====================================================================
 436          U16 code  LF_key_max[KEY_NUMBER1] = 
 437          {
 438            #if KEY_NUMBER1 >= 1
 439              LF_diff0 ,  //key0
 440            #endif
 441            #if KEY_NUMBER1 >= 2
 442              LF_diff1 ,  //key1
 443            #endif
 444            #if KEY_NUMBER1 >= 3
 445              LF_diff2 ,  //key2
 446            #endif
 447            #if KEY_NUMBER1 >= 4
 448              LF_diff3 ,  //key3
 449            #endif
 450            #if KEY_NUMBER1 >= 5
 451              LF_diff4 ,  //key4
 452            #endif
 453            #if KEY_NUMBER1 >= 6
 454              LF_diff5 ,  //key5
 455            #endif
 456            #if KEY_NUMBER1 >= 7
 457              LF_diff6 ,  //key6
 458            #endif
 459            #if KEY_NUMBER1 >= 8
 460              LF_diff7 ,  //key7
 461            #endif
 462            #if KEY_NUMBER1 >= 9
 463              LF_diff8 ,  //key8
 464            #endif
 465            #if KEY_NUMBER1 >= 10
 466              LF_diff9 ,  //key9
 467            #endif
 468            #if KEY_NUMBER1 >= 11
 469              LF_diff10,  //key10
 470            #endif
 471            #if KEY_NUMBER1 >= 12
 472              LF_diff11,  //key11
 473            #endif
 474            #if KEY_NUMBER1 >= 13
 475              LF_diff12,  //key12
 476            #endif
 477            #if KEY_NUMBER1 >= 14
 478              LF_diff13,  //key13
 479            #endif
 480            #if KEY_NUMBER1 >= 15
 481              LF_diff14,  //key14
 482            #endif
 483            #if KEY_NUMBER1 >= 16
 484              LF_diff15,  //key15
 485            #endif
 486            #if KEY_NUMBER1 >= 17
                  LF_diff16,  //key16
                #endif
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 9   

 489            #if KEY_NUMBER1 >= 18
                  LF_diff17,  //key17
                #endif
 492            #if KEY_NUMBER1 >= 19
                  LF_diff18,  //key18
                #endif
 495            #if KEY_NUMBER1 >= 20
                  LF_diff19,  //key19
                #endif
 498            #if KEY_NUMBER1 >= 21
                  LF_diff20,  //key20
                #endif
 501            #if KEY_NUMBER1 >= 22
                  LF_diff21,  //key21
                #endif
 504            #if KEY_NUMBER1 >= 23
                  LF_diff22,  //key22
                #endif
 507            #if KEY_NUMBER1 >= 24
                  LF_diff23,  //key23
                #endif
 510          };
 511          U16 code  LF_key_threshold[KEY_NUMBER1] =
 512          {
 513            #if KEY_NUMBER1 >= 1
 514              (LF_diff0>>2)*Thrd_Per0/25,  //key0
 515            #endif
 516            #if KEY_NUMBER1 >= 2
 517              (LF_diff1>>2)*Thrd_Per1/25,  //key1
 518            #endif
 519            #if KEY_NUMBER1 >= 3
 520              (LF_diff2>>2)*Thrd_Per2/25,  //key2
 521            #endif
 522            #if KEY_NUMBER1 >= 4
 523              (LF_diff3>>2)*Thrd_Per3/25,  //key3
 524            #endif
 525            #if KEY_NUMBER1 >= 5
 526              (LF_diff4>>2)*Thrd_Per4/25,  //key4
 527            #endif
 528            #if KEY_NUMBER1 >= 6
 529              (LF_diff5>>2)*Thrd_Per5/25,  //key5
 530            #endif
 531            #if KEY_NUMBER1 >= 7
 532              (LF_diff6>>2)*Thrd_Per6/25,  //key6
 533            #endif
 534            #if KEY_NUMBER1 >= 8
 535              (LF_diff7>>2)*Thrd_Per7/25,  //key7
 536            #endif
 537            #if KEY_NUMBER1 >= 9
 538              (LF_diff8>>2)*Thrd_Per8/25,  //key8
 539            #endif
 540            #if KEY_NUMBER1 >= 10
 541              (LF_diff9>>2)*Thrd_Per9/25,  //key9
 542            #endif
 543            #if KEY_NUMBER1 >= 11
 544              (LF_diff10>>2)*Thrd_Per10/25, //key10
 545            #endif
 546            #if KEY_NUMBER1 >= 12
 547              (LF_diff11>>2)*Thrd_Per11/25, //key11
 548            #endif
 549            #if KEY_NUMBER1 >= 13
 550              (LF_diff12>>2)*Thrd_Per12/25,  //key12
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 10  

 551            #endif
 552            #if KEY_NUMBER1 >= 14
 553              (LF_diff13>>2)*Thrd_Per13/25,  //key13
 554            #endif
 555            #if KEY_NUMBER1 >= 15
 556              (LF_diff14>>2)*Thrd_Per14/25,  //key14
 557            #endif
 558            #if KEY_NUMBER1 >= 16
 559              (LF_diff15>>2)*Thrd_Per15/25,  //key15
 560            #endif
 561            
 562            #if KEY_NUMBER1 >= 17
                  (LF_diff16>>2)*Thrd_Per16/25,  //key16
                #endif
 565            
 566            #if KEY_NUMBER1 >= 18
                  (LF_diff17>>2)*Thrd_Per17/25,  //key17
                #endif
 569            #if KEY_NUMBER1 >= 19
                  (LF_diff18>>2)*Thrd_Per18/25,  //key18
                #endif
 572            #if KEY_NUMBER1 >= 20
                  (LF_diff19>>2)*Thrd_Per19/25,  //key19
                #endif
 575            #if KEY_NUMBER1 >= 21
                  (LF_diff20>>2)*Thrd_Per20/25,  //key20
                #endif
 578            #if KEY_NUMBER1 >= 22
                  (LF_diff21>>2)*Thrd_Per21/25,  //key21
                #endif
 581            #if KEY_NUMBER1 >= 23
                  (LF_diff22>>2)*Thrd_Per22/25,  //key22
                #endif  
 584            #if KEY_NUMBER1 >= 24
                  (LF_diff23>>2)*Thrd_Per23/25,  //key23
                #endif         
 587               
 588          };
 589          //====================================================================
 590          //    TKDIV
 591          //====================================================================
 592          U16 code  Tab_HF_DIV[KEY_NUMBER1] = 
 593          {
 594            #if KEY_NUMBER1 >= 1
 595              HF_DIV0,    //key_group0
 596            #endif
 597            #if KEY_NUMBER1 >= 2
 598              HF_DIV1,    //key_group1
 599            #endif
 600            #if KEY_NUMBER1 >= 3
 601              HF_DIV2,    //key_group2
 602            #endif
 603            #if KEY_NUMBER1 >= 4
 604              HF_DIV3,    //key_group3
 605            #endif
 606            #if KEY_NUMBER1 >= 5
 607              HF_DIV4,    //key_group4
 608            #endif
 609            #if KEY_NUMBER1 >= 6
 610              HF_DIV5,    //key_group5
 611            #endif
 612            #if KEY_NUMBER1 >= 7
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 11  

 613              HF_DIV6,    //key_group6
 614            #endif
 615            #if KEY_NUMBER1 >= 8
 616              HF_DIV7,    //key_group7
 617            #endif
 618            #if KEY_NUMBER1 >= 9
 619              HF_DIV8,    //key_group8
 620            #endif
 621            #if KEY_NUMBER1 >= 10
 622              HF_DIV9,    //key_group9
 623            #endif
 624            #if KEY_NUMBER1 >= 11
 625              HF_DIV10,   //key_group10
 626            #endif
 627            #if KEY_NUMBER1 >= 12
 628              HF_DIV11,   //key_group11
 629            #endif
 630            #if KEY_NUMBER1 >= 13
 631              HF_DIV12,   //key_group12
 632            #endif
 633            #if KEY_NUMBER1 >= 14
 634              HF_DIV13,   //key_group13
 635            #endif
 636            #if KEY_NUMBER1 >= 15
 637              HF_DIV14,   //key_group14
 638            #endif
 639            #if KEY_NUMBER1 >= 16
 640              HF_DIV15,   //key_group15
 641            #endif
 642          
 643            #if KEY_NUMBER1 >= 17
                  HF_DIV16,   //key_group15
                #endif
 646            #if KEY_NUMBER1 >= 18
                  HF_DIV17,   //key_group15
                #endif
 649            #if KEY_NUMBER1 >= 19
                  HF_DIV18,   //key_group15
                #endif
 652            #if KEY_NUMBER1 >= 20
                  HF_DIV19,   //key_group15
                #endif
 655            #if KEY_NUMBER1 >= 21
                  HF_DIV20,   //key_group15
                #endif
 658            #if KEY_NUMBER1 >= 22
                  HF_DIV21,   //key_group15
                #endif
 661            #if KEY_NUMBER1 >= 23
                  HF_DIV22,   //key_group15
                #endif
 664            #if KEY_NUMBER1 >= 24
                  HF_DIV23,   //key_group15
                #endif
 667          
 668          };
 669          //==========================================================
 670          //
 671          //==========================================================
 672          U16 code  Tab_LF_DIV[KEY_NUMBER1] = 
 673          {
 674            #if KEY_NUMBER1 >= 1
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 12  

 675              LF_DIV0,    //key_group0
 676            #endif
 677            #if KEY_NUMBER1 >= 2
 678              LF_DIV1,    //key_group1
 679            #endif
 680            #if KEY_NUMBER1 >= 3
 681              LF_DIV2,    //key_group2
 682            #endif
 683            #if KEY_NUMBER1 >= 4
 684              LF_DIV3,    //key_group3
 685            #endif
 686            #if KEY_NUMBER1 >= 5
 687              LF_DIV4,    //key_group4
 688            #endif
 689            #if KEY_NUMBER1 >= 6
 690              LF_DIV5,    //key_group5
 691            #endif
 692            #if KEY_NUMBER1 >= 7
 693              LF_DIV6,    //key_group6
 694            #endif
 695            #if KEY_NUMBER1 >= 8
 696              LF_DIV7,    //key_group7
 697            #endif
 698            #if KEY_NUMBER1 >= 9
 699              LF_DIV8,    //key_group8
 700            #endif
 701            #if KEY_NUMBER1 >= 10
 702              LF_DIV9,    //key_group9
 703            #endif
 704            #if KEY_NUMBER1 >= 11
 705              LF_DIV10,   //key_group10
 706            #endif
 707            #if KEY_NUMBER1 >= 12
 708              LF_DIV11,   //key_group11
 709            #endif
 710            #if KEY_NUMBER1 >= 13
 711              LF_DIV12,   //key_group12
 712            #endif
 713            #if KEY_NUMBER1 >= 14
 714              LF_DIV13,   //key_group13
 715            #endif
 716            #if KEY_NUMBER1 >= 15
 717              LF_DIV14,   //key_group14
 718            #endif
 719            #if KEY_NUMBER1 >= 16
 720              LF_DIV15,   //key_group15
 721            #endif
 722          
 723            #if KEY_NUMBER1 >= 17
                  LF_DIV16,   //key_group16
                #endif
 726            #if KEY_NUMBER1 >= 18
                  LF_DIV17,   //key_group17
                #endif
 729            #if KEY_NUMBER1 >= 19
                  LF_DIV18,   //key_group18
                #endif
 732            #if KEY_NUMBER1 >= 20
                  LF_DIV19,   //key_group19
                #endif
 735            #if KEY_NUMBER1 >= 21
                  LF_DIV20,   //key_group20
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 13  

                #endif
 738            #if KEY_NUMBER1 >= 22
                  LF_DIV21,   //key_group21
                #endif
 741            #if KEY_NUMBER1 >= 23
                  LF_DIV22,   //key_group22
                #endif
 744            #if KEY_NUMBER1 >= 24
                  LF_DIV23,   //key_group23
                #endif
 747          
 748          };
 749          ///////////////////////////////////////////////////////////////
 750          ///////////// 触摸按键阈值百分比配置表 (0~100)/////////////////
 751          ////（建议根据实际触感调整该配置，从而调整各按键灵敏度）///////
 752          ///////////////////////////////////////////////////////////////
 753          U8  code  key_threshold_per[KEY_NUMBER1] = 
 754          {
 755          #if KEY_NUMBER1 >= 1
 756            Thrd_Per0,  //key0
 757          #endif
 758          #if KEY_NUMBER1 >= 2
 759            Thrd_Per1,  //key1
 760          #endif
 761          #if KEY_NUMBER1 >= 3
 762            Thrd_Per2,  //key2
 763          #endif
 764          #if KEY_NUMBER1 >= 4
 765            Thrd_Per3,  //key3
 766          #endif
 767          #if KEY_NUMBER1 >= 5
 768            Thrd_Per4,  //key4
 769          #endif
 770          #if KEY_NUMBER1 >= 6
 771            Thrd_Per5,  //key5
 772          #endif
 773          #if KEY_NUMBER1 >= 7
 774            Thrd_Per6,  //key6
 775          #endif
 776          #if KEY_NUMBER1 >= 8
 777            Thrd_Per7,  //key7
 778          #endif
 779          #if KEY_NUMBER1 >= 9
 780            Thrd_Per8,  //key8
 781          #endif
 782          #if KEY_NUMBER1 >= 10
 783            Thrd_Per9,  //key9
 784          #endif
 785          #if KEY_NUMBER1 >= 11
 786            Thrd_Per10, //key10
 787          #endif
 788          #if KEY_NUMBER1 >= 12
 789            Thrd_Per11, //key11
 790          #endif
 791          #if KEY_NUMBER1 >= 13
 792            Thrd_Per12, //key12
 793          #endif
 794          #if KEY_NUMBER1 >= 14
 795            Thrd_Per13, //key13
 796          #endif
 797          #if KEY_NUMBER1 >= 15
 798            Thrd_Per14, //key14
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 14  

 799          #endif
 800          #if KEY_NUMBER1 >= 16
 801            Thrd_Per15, //key15
 802          #endif
 803          #if KEY_NUMBER1 >= 17
                Thrd_Per16, //key16
              #endif
 806          #if KEY_NUMBER1 >= 18
                Thrd_Per17, //key17
              #endif
 809          #if KEY_NUMBER1 >= 19
                Thrd_Per18, //key18
              #endif
 812          #if KEY_NUMBER1 >= 20
                Thrd_Per19, //key19
              #endif
 815          #if KEY_NUMBER1 >= 21
                Thrd_Per20, //key20
              #endif
 818          #if KEY_NUMBER1 >= 22
                Thrd_Per21, //key21
              #endif
 821          #if KEY_NUMBER1 >= 23
                Thrd_Per22, //key22
              #endif
 824          #if KEY_NUMBER1 >= 24
                Thrd_Per23, //key23
              #endif
 827          };
 828          
 829          U8 xdata HF_stblecount[KEY_NUMBER1]={0};      
 830          U8 xdata LF_stblecount[KEY_NUMBER1]={0};      
 831          //====================================================================
 832          //
 833          // 触摸按键初始化
 834          //
 835          //====================================================================
 836          void tk_para_init()
 837          {
 838   1      U8  i;
 839   1           tk_num = KEY_NUMBER1;
 840   1           key_tkst_flag      =     TKST_IS_High_Fre;
 841   1           key_tkst_flag_pre   =    TKST_IS_High_Fre;
 842   1           tkst_flag               =     TKST_IS_High_Fre;
 843   1           tkst_flag_pre      =     TKST_IS_High_Fre;
 844   1      
 845   1          key_max             =   HF_key_max           ;
 846   1          key_baseline        =   HF_key_baseline      ;
 847   1          key_threshold       =   HF_key_threshold     ;
 848   1          key                 =   HF_key               ;
 849   1           stblecount          =   HF_stblecount        ;         
 850   1      
 851   1          keytouch_flag       =   &(HF_keytouch_flag)     ;
 852   1          key_flag            =   LF_key_flag          ;
 853   1          baseline_plus_flag  =   HF_baseline_plus_flag;
 854   1           key_count_sub       =   HF_key_count_sub     ;
 855   1          CSI_cnt             =   &(HF_CSI_cnt)        ;
 856   1          
 857   1           nakevalue = Nake_Value;                 //
 858   1           Add_function = Function;           //
 859   1           multikey_control = multikey_num + 1;//
 860   1           multikey_control2 = multikey_num + 1;
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 15  

 861   1           multikey_control3 = multikey_num + 1;
 862   1           Add_Set = OtherSet;//lmy0115
 863   1           L_Inter1 = L_Inter1_set;
 864   1           L_Inter2 = L_Inter2_set;
 865   1           Dui_num = Dui_num_set;
 866   1           stable_limit1 = StableLimit_set1;
 867   1           STcnt_One =    STcnt_One_set;
 868   1           STcnt_Two = STcnt_Two_set;
 869   1           R_downCnt = L_downCnt;
 870   1           R_downCnt2 = L_downCnt2;
 871   1           R_maxlimit = L_maxlimit;
 872   1           R_nakelimit = L_nakelimit;
 873   1           FLAG_COUNT_set = FLAG_COUNT;
 874   1           init_BaseCnt_set = L_BaseCnt_set;
 875   1           normal_jitter_set = normal_jitter;
 876   1           key_fastcounter = key_fastcounter_set;
 877   1           key_stablecounter = key_stablecounter_set;
 878   1      
 879   1           R_DATA_RAM_ADDR = TK_DATA_RAM_ADDR;
 880   1           tk_init_req = 1;
 881   1           TK_going_flag =0;
 882   1           line=0;
 883   1          sino_key_value = 0;
 884   1      
 885   1          for(i=0;i<KEY_NUMBER1;i++)
 886   1           {              
 887   2                EnIO(Tab_Chn[i]);
 888   2           }
 889   1          EnTk(Tab_Chn[0]);
 890   1           tk_samp_fre_set();
 891   1           //--参数配置--//
 892   1           EN_TK_Fre_Random;
 893   1           TK_Fre_RDM_Offset4
 894   1          EN_TK_Compensate;    
 895   1      #if (chip_sel<L_chip_sel1XX)  //3212系列
                   TK_Comp_POW_Weak;
                   TK_Comp_POW_SEL_OP;
              #endif
 899   1           TKVREF = (TKVREF & 0x3F);
 900   1           TKVREF |= Vref;
 901   1           TKVREF = (TKVREF & 0xF3);
 902   1           TKVREF |= Vop;     
 903   1      #if (Function&0x04)     
                  TK_SAMP_SEL_3CNT;
              #else
 906   1           TK_SAMP_SEL_1CNT;
 907   1      #endif
 908   1          TK_MD_SEL_CNT;
 909   1           //------------------------------//
 910   1      #if  chip_sel <L_chip_sel1XX
                   TK_CMP_Delay_32SCK;
                   TK_Dischg_512SCK;  
                   IEN0 |= 0x01;
                   Enable_TK
              #elif chip_sel<L_chip_sel2XX
                   TK_CMP_Delay_32SCK;
                   TK_Dischg_512SCK; 
                   IEN0 |= 0x02;
                  Enable_Touch;
              #else
 921   1           TK_CMP_Delay_64SCK;
 922   1           TK_Dischg_640SCK;  
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 16  

 923   1           IEN0 |= 0x02;
 924   1          Enable_Touch;
 925   1      #endif
 926   1      
 927   1      }   
 928          //====================================================================
 929          //
 930          // 触摸按键扫描信道开启
 931          //
 932          //====================================================================
 933          #if chip_sel<L_chip_sel1XX
              void EnTk(U8 n)
              {    
                   switch(n)
                   {
                        case 0:   P2SS |= BIT0;  TKU1 |= BIT0;  break;
                   case 1:   P2SS |= BIT1;  TKU1 |= BIT1;  break;
                   case 2:   P2SS |= BIT2;  TKU1 |= BIT2;  break;
                   case 3:   P2SS |= BIT3;  TKU1 |= BIT3;  break;
                   case 4:   P2SS |= BIT4;  TKU1 |= BIT4;  break;
                   case 5:   P2SS |= BIT5;  TKU1 |= BIT5;  break;
                   case 6:   P2SS |= BIT6;  TKU1 |= BIT6;  break;
                   case 7:   P2SS |= BIT7;  TKU1 |= BIT7;  break;
                   }
              }
              #elif     chip_sel<L_chip_sel2XX
              void EnTk(U8 n)
              {    
                   switch(n)
                   {
                        case 0:        P0SS      |= BIT0;  TKU1 |= BIT0;       break;
                        case 1:        P0SS      |= BIT1;  TKU1 |= BIT1;       break;
                        case 2:        P0SS      |= BIT2;  TKU1 |= BIT2;       break;
                        case 3:        P0SS      |= BIT3;  TKU1 |= BIT3;       break;
                        case 4:        P0SS      |= BIT4;  TKU1 |= BIT4;       break;
                        case 5:        P0SS      |= BIT5;  TKU1 |= BIT5;       break;
                        case 6:        P0SS      |= BIT6;  TKU1 |= BIT6;       break;
                        case 7:        P0SS      |= BIT7;  TKU1 |= BIT7;       break;
              
                        case 8:     P2SS    |= BIT0;    TKU2 |= BIT0;          break;
                        case 9:     P2SS    |= BIT1;    TKU2 |= BIT1;          break;
                        case 10:    P2SS    |= BIT2;    TKU2 |= BIT2;          break;
                        case 11:    P2SS    |= BIT3;    TKU2 |= BIT3;          break;
                        case 12:    P2SS    |= BIT4;    TKU2 |= BIT4;          break;
                        case 13:    P2SS    |= BIT5;    TKU2 |= BIT5;          break;
                        case 14:    P2SS    |= BIT6;    TKU2 |= BIT6;          break;
                        case 15:    P2SS    |= BIT7;    TKU2 |= BIT7;          break;
              
                        case 16:    P1SS    |= BIT1;    TKU3 |= BIT0;          break;
                        case 17:    P1SS    |= BIT2;    TKU3 |= BIT1;          break;
                        case 18:    P1SS    |= BIT3;    TKU3 |= BIT2;          break;
                        case 19:    P1SS    |= BIT4;    TKU3 |= BIT3;          break;
                   }
              }
              #else       //326xx
 978          void EnTk(U8 n)
 979          {    
 980   1           switch(n)
 981   1           {
 982   2                case 0:        P1SS      |= BIT0;  TKU1 |= BIT0;       break;
 983   2                case 1:        P1SS      |= BIT1;  TKU1 |= BIT1;       break;
 984   2                case 2:        P1SS      |= BIT2;  TKU1 |= BIT2;       break;
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 17  

 985   2                case 3:        P1SS      |= BIT3;  TKU1 |= BIT3;       break;
 986   2                case 4:        P1SS      |= BIT4;  TKU1 |= BIT4;       break;
 987   2                case 5:        P1SS      |= BIT5;  TKU1 |= BIT5;       break;
 988   2                case 6:        P1SS      |= BIT6;  TKU1 |= BIT6;       break;
 989   2                case 7:        P1SS      |= BIT7;  TKU1 |= BIT7;       break;
 990   2              #ifndef L_n_p0SS
 991   2                case 8:     P0SS    |= BIT0;    TKU2 |= BIT0;          break;
 992   2                case 9:     P0SS    |= BIT1;    TKU2 |= BIT1;          break;
 993   2                case 10:    P0SS    |= BIT2;    TKU2 |= BIT2;          break;
 994   2                case 11:    P0SS    |= BIT3;    TKU2 |= BIT3;          break;
 995   2                case 12:    P0SS    |= BIT4;    TKU2 |= BIT4;          break;
 996   2                case 13:    P0SS    |= BIT5;    TKU2 |= BIT5;          break;
 997   2                case 14:    P0SS    |= BIT6;    TKU2 |= BIT6;          break;
 998   2              #endif
 999   2                case 15:    P5SS    |= BIT0;    TKU2 |= BIT7;          break;
1000   2                case 16:    P5SS    |= BIT1;    TKU3 |= BIT0;          break;
1001   2                case 17:    P5SS    |= BIT2;    TKU3 |= BIT1;          break;
1002   2                case 18:    P5SS    |= BIT3;    TKU3 |= BIT2;          break;
1003   2                case 19:    P4SS    |= BIT5;    TKU3 |= BIT3;          break;
1004   2                case 20:    P4SS    |= BIT4;    TKU3 |= BIT4;          break;
1005   2                case 21:    P4SS    |= BIT3;    TKU3 |= BIT5;          break;
1006   2                case 22:    P4SS    |= BIT2;    TKU3 |= BIT6;          break;
1007   2                case 23:    P4SS    |= BIT1;    TKU3 |= BIT7;          break;
1008   2           }
1009   1      }
1010          #endif
1011          //====================================================================
1012          //
1013          // 触摸按键扫描信道IO设置
1014          //
1015          //====================================================================
1016          #if chip_sel<L_chip_sel1XX
              void EnIO(U8 n)
              {    
                   switch(n)
                   {
                        case 0:        P1CR |= BIT7;  P1 &= 0x7F;             break;
                        case 1:        P2CR      |= BIT0;  P2 &= 0xFE;             break;
                        case 2:        P2CR      |= BIT1;  P2 &= 0xFD;             break;
                        case 3:        P2CR      |= BIT2;  P2 &= 0xFB;             break;
                        case 4:        P2CR      |= BIT3;  P2 &= 0xF7;             break;
                        case 5:        P2CR |= BIT4;  P2 &= 0xEF;             break;
                        case 6:        P2CR      |= BIT5;  P2 &= 0xDF;             break;
                        case 7:        P2CR      |= BIT6;  P2 &= 0XBF;              break;
                   }
              }
              #elif     chip_sel<L_chip_sel2XX
              void EnIO(U8 n)
              {    
                   switch(n)
                   {
                        case 0:        P0CR |= BIT0;  P0 &= 0xFE;             break;
                        case 1:        P0CR      |= BIT1;  P0 &= 0xFD;             break;
                        case 2:        P0CR      |= BIT2;  P0 &= 0xFB;             break;
                        case 3:        P0CR      |= BIT3;  P0 &= 0xF7;             break;
                        case 4:        P0CR      |= BIT4;  P0 &= 0xEF;             break;
                        case 5:        P0CR |= BIT5;  P0 &= 0xDF;             break;
                        case 6:        P0CR      |= BIT6;  P0 &= 0xBF;             break;
                        case 7:        P0CR      |= BIT7;  P0 &= 0X7F;              break;
                       case 8:     P2CR    |= BIT0;    P2 &= 0xFE;        break;
                        case 9:     P2CR    |= BIT1;    P2 &= 0xFD;       break;
                        case 10:    P2CR    |= BIT2;    P2 &= 0xFB;       break;
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 18  

                        case 11:    P2CR    |= BIT3;    P2 &= 0xF7;       break;
                        case 12:    P2CR    |= BIT4;    P2 &= 0xEF;       break;
                        case 13:    P2CR    |= BIT5;    P2 &= 0xDF;            break;
                        case 14:    P2CR    |= BIT6;    P2 &= 0xBF;       break;
                        case 15:    P2CR    |= BIT7;    P2 &= 0X7F;       break;
                        case 16:    P1CR    |= BIT1;    P1 &= 0xFD;       break;
                        case 17:    P1CR    |= BIT2;    P1 &= 0xFB;       break;
                        case 18:    P1CR    |= BIT3;    P1 &= 0xF7;       break;
                        case 19:    P1CR    |= BIT4;    P1 &= 0xEF;       break;
                   }
              }
              #else      //326xx
1059          void EnIO(U8 n)
1060          {    
1061   1           switch(n)
1062   1           {
1063   2                case 0:        P1CR |= BIT0;  P1 &= 0xFE;             break;
1064   2                case 1:        P1CR      |= BIT1;  P1 &= 0xFD;             break;
1065   2                case 2:        P1CR      |= BIT2;  P1 &= 0xFB;             break;
1066   2                case 3:        P1CR      |= BIT3;  P1 &= 0xF7;             break;
1067   2                case 4:        P1CR      |= BIT4;  P1 &= 0xEF;             break;
1068   2                case 5:        P1CR |= BIT5;  P1 &= 0xDF;             break;
1069   2                case 6:        P1CR      |= BIT6;  P1 &= 0xBF;             break;
1070   2                case 7:        P1CR      |= BIT7;  P1 &= 0X7F;              break;
1071   2               case 8:     P0CR    |= BIT0;    P0 &=0xFE;         break;
1072   2                case 9:     P0CR    |= BIT1;    P0 &= 0xFD;       break;
1073   2                case 10:    P0CR    |= BIT2;    P0 &= 0xFB;       break;
1074   2                case 11:    P0CR    |= BIT3;    P0 &= 0xF7;       break;
1075   2                case 12:    P0CR    |= BIT4;    P0 &= 0xEF;       break;
1076   2                case 13:    P0CR    |= BIT5;    P0 &= 0xDF;            break;
1077   2                case 14:    P0CR    |= BIT6;    P0 &= 0xBF;       break;
1078   2                case 15:    INSCON=0x40;        P5CR |= BIT0;       P5 |= 0x01;  INSCON=0x00;        break;
1079   2                case 16:    INSCON=0x40;        P5CR |= BIT1;       P5 |= 0x02; INSCON=0x00;    break;
1080   2                case 17:    INSCON=0x40;        P5CR |= BIT2;       P5 &= 0xFB;  INSCON=0x00;   break;
1081   2                case 18:    INSCON=0x40;        P5SS |= BIT3;       P5 &= 0xF7;  INSCON=0x00;   break;
1082   2                case 19:    P4CR    |= BIT5;    P4 &= 0xDF;       break;
1083   2                case 20:    P4CR    |= BIT4;    P4 &= 0xEF;       break;
1084   2                case 21:    P4CR    |= BIT3;    P4 &= 0xF7;       break;
1085   2                case 22:    P4CR    |= BIT2;    P4 &= 0xFB;       break;
1086   2                case 23:    P4CR    |= BIT1;    P4 &= 0xFD;       break;
1087   2           }
1088   1      }
1089          
1090          #endif
1091          //====================================================================
1092          //
1093          // Disable touch key 
1094          //
1095          //====================================================================
1096          #if chip_sel<L_chip_sel1XX
              void DisTk(void)
              {
                 TKU1=0;
                 P2SS=0;
              }
              #elif chip_sel<L_chip_sel2XX
              void DisTk(void)
               {
                 TKU1=0;
                 TKU2=0;
                 TKU3=0;
                 P0SS=0;
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 19  

                 P1SS=0;
                 P2SS=0;
              }
              #else
1113          void DisTk(void)
1114           {
1115   1         TKU1=0;
1116   1         TKU2=0;
1117   1         TKU3=0;
1118   1      #ifndef L_n_p0SS
1119   1         P0SS=0;
1120   1      #endif
1121   1         P1SS=0;
1122   1         P4SS=0;
1123   1         P5SS=0;
1124   1      }
1125          #endif
1126          //====================================================================
1127          //
1128          // 触摸按键开关频率及放大系数设定
1129          //
1130          //====================================================================
1131          void tk_samp_fre_set()   
1132          {   
1133   1           TKDIV01 = 0x00;
1134   1           TKDIV02 = 0x00;          // 放大系数寄存器
1135   1      //扫完最后一个通道，在开始下一次（轮）扫描前将参数切换至第一通道
1136   1           DisTk();
1137   1           EnTk(Tab_Chn[line]);        
1138   1          if(tkst_flag == TKST_IS_High_Fre)
1139   1           {
1140   2                TKST = HF_TKST;
1141   2                TKDIV04 = (U8)(Tab_HF_DIV[line]>>8);   
1142   2                TKDIV03 = (U8)(Tab_HF_DIV[line]);  
1143   2           }
1144   1           else
1145   1           {
1146   2                TKST = LF_TKST;
1147   2                TKDIV04 = (U8)(Tab_LF_DIV[line]>>8);   
1148   2                TKDIV03 = (U8)(Tab_LF_DIV[line]);               
1149   2           }
1150   1      }
1151          
1152          void TK_start()
1153          {
1154   1           TK_GO;
1155   1      }
1156          void Rst_WDT()
1157          {
1158   1           RSET_WATCHDOG;
1159   1      }
1160          
1161          void init_tkErrchk()
1162          {
1163   1         if(key_tkerrCnt > L_tkErrCnt)
1164   1         {
1165   2             tk_init_req = 0;  //exit
1166   2             f_tkErr     = 1;
1167   2             key_sample_count = 0;  
1168   2         } 
1169   1      }
1170          
C51 COMPILER V9.54   SINO_TK_ISR                                                           08/31/2022 15:02:57 PAGE 20  

1171          void tk_resetChk()
1172          {
1173   1           if(tk_init_req)
1174   1           {
1175   2              GetInitialTouchkeyData();
1176   2           }
1177   1           if(tk_init_req ==0)
1178   1           {//基线重新获取完成
1179   2             f_tkErr = 0;
1180   2           }    
1181   1      }
1182          
1183          
1184          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1235    ----
   CONSTANT SIZE    =    224    ----
   XDATA SIZE       =    508       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =     16    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
