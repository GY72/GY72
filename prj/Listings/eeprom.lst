C51 COMPILER V9.54   EEPROM                                                                08/31/2022 15:02:56 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Objects\eeprom.obj
COMPILER INVOKED BY: D:\Keil5\C51\BIN\C51.EXE ..\src\lib\eeprom.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\eeprom.lst) TABS(5) OBJECT(.\Objects\eeprom.obj)

line level    source

   1          
   2          #include "../include_s.h"
   3          
   4          
   5          /*
   6           * 2K eeprom 256*8扇区 只使用前面 扇区
   7           * FALSH/类 EEPROM 烧写/擦除的超级抗干扰措施：
   8           * 1） 在程序下载时，选择代码选项中的“enable LVR function”。
   9           * 2） 设置扇区时，对 XPAGE 写立即数。
  10           * 3） 在调用烧写或擦除函数前，置一个标志，比如 0A5H；在烧写或擦除函数中判
             -断此标志是否为 0A5H，否则清零此标志，退出函数。
  11           *
  12           */
  13          #define EEPROM_EMPTY 0xaa
  14          
  15          E2Prom_t eeprom;
  16          E2Para_t eeprom_para;
  17          
  18          u8 para_pos;
  19          
  20          /***************************
  21           * 
  22           * Ssp_Erase: ;擦除子程序
  23           */
  24          void eeprom_erase(u8 n)
  25          {
  26   1          bool ea_f;
  27   1      
  28   1          ea_f = EA;
  29   1      
  30   1          EA = 0;
  31   1          FLASHCON = 1;
  32   1      
  33   1          IB_CON1 = 0xE6;
  34   1          IB_CON2 = 0x05;
  35   1          IB_CON3 = 0x0A;
  36   1          IB_CON4 = 0x09;   
  37   1      
  38   1          if (eeprom.write_cmd == EEPROM_CMD)
  39   1          {
  40   2              XPAGE   = (n<<1);       //XPAGE bit0是512字节地址的高位！
  41   2              IB_CON5 = 0x06;
  42   2              NOP();
  43   2              NOP();
  44   2              NOP();
  45   2              NOP();
  46   2          }
  47   1      
  48   1          eeprom.write_cmd = 0;
  49   1      
  50   1          IB_CON1 = 0x00;
  51   1          IB_CON2 = 0x00;
  52   1          IB_CON3 = 0x00;
  53   1          IB_CON4 = 0x00;
C51 COMPILER V9.54   EEPROM                                                                08/31/2022 15:02:56 PAGE 2   

  54   1          IB_CON5 = 0x00;
  55   1          XPAGE   = 0;
  56   1      
  57   1          FLASHCON = 0;
  58   1          EA = ea_f;
  59   1      }
  60          
  61          /***************************
  62           * 
  63           * 写入子程序
  64           */
  65          
  66          void eeprom_write(u8 * src, u8 len, u16 addr)
  67          {
  68   1          u8 i;
  69   1          bool ea_f;
  70   1      
  71   1          ea_f = EA;
  72   1      
  73   1          EA = 0;
  74   1          FLASHCON = 1;
  75   1      
  76   1          for (i = 0; i < len; i++)
  77   1          {
  78   2              IB_OFFSET   = addr;         //烧写地址低位
  79   2              XPAGE       = (addr >> 8);  //烧写地址高位
  80   2              IB_DATA     = *src++;
  81   2      
  82   2              IB_CON1     = 0x6E;
  83   2              IB_CON2     = 0x05;
  84   2              IB_CON3     = 0x0A;
  85   2              IB_CON4     = 0x09;
  86   2      
  87   2              if (eeprom.write_cmd == EEPROM_CMD)
  88   2              {
  89   3                  IB_CON5 = 0x06;
  90   3                  NOP();
  91   3                  NOP();
  92   3                  NOP();
  93   3                  NOP();
  94   3              }
  95   2              else
  96   2                  break;
  97   2      
  98   2              addr++;
  99   2          }
 100   1      
 101   1          eeprom.write_cmd = 0;
 102   1      
 103   1          IB_CON1 = 0x00;
 104   1          IB_CON2 = 0x00;
 105   1          IB_CON3 = 0x00;
 106   1          IB_CON4 = 0x00;
 107   1          IB_CON5 = 0x00;
 108   1          XPAGE   = 0;
 109   1      
 110   1          FLASHCON = 0;
 111   1          EA = ea_f;
 112   1      }
 113          
 114          /***************************
 115           * 
C51 COMPILER V9.54   EEPROM                                                                08/31/2022 15:02:56 PAGE 3   

 116           * 写入子程序
 117           */
 118          
 119          void save_para_block(void)
 120          {
 121   1          eeprom.write_cmd = EEPROM_CMD;
 122   1          eeprom_erase(PARA_PAGE);
 123   1                
 124   1                eeprom_para.wash_infor_b2  = (add_50hour_up & 0x0000ff0000) >>16;
 125   1                
 126   1                eeprom_para.wash_infor_b1  = (add_50hour_up & 0x000000ff00) >>8;
 127   1                
 128   1                eeprom_para.wash_infor_b0  = (add_50hour_up & 0xff);
 129   1                
 130   1          eeprom.write_cmd   = EEPROM_CMD;
 131   1          eeprom_write((u8 *)&eeprom_para, sizeof(E2Para_t), 16+0);
 132   1      }
 133          
 134          void read_para_block(void)
 135          {
 136   1          u8 j, len = sizeof(E2Para_t);
 137   1          u8 check_sum = 0;
 138   1                
 139   1          u8 crom * ptr  = (u8 crom *)(16+0);
 140   1          u8 * para      = (u8  *)&eeprom_para;
 141   1                
 142   1          FLASHCON = 1;
 143   1          for (j = 0; j < len; j++)
 144   1              *para++ = *ptr++;
 145   1          FLASHCON = 0;
 146   1                
 147   1           add_50hour_up = ( (eeprom_para.wash_infor_b2 & 0xffffffff) << 16) | ( (eeprom_para.wash_infor_b1 & 0x
             -ffffffff) << 8) | (eeprom_para.wash_infor_b0);
 148   1                
 149   1      }
 150          
 151          /***************************
 152           * 
 153           * 读写 PAGE1
 154           */
 155          void write_e2_bytes(u8 * src, u8 len)
 156          {
 157   1          eeprom.write_cmd = EEPROM_CMD;
 158   1          eeprom_erase(EEPROM_PAGE1);
 159   1      
 160   1          eeprom.write_cmd = EEPROM_CMD;
 161   1          eeprom_write(src, len, EEPROM_PAGE1*SECTOR_BYTE+0); 
 162   1      }
 163          
 164          void read_e2_bytes(u8 * dst, u8 len)
 165          {
 166   1          u8 j;
 167   1      
 168   1          u8 crom * ptr  = (u8 crom *)(EEPROM_PAGE1*SECTOR_BYTE+0);
 169   1      
 170   1          FLASHCON = 1;
 171   1          for (j = 0; j < len; j++)
 172   1              *dst++ = *ptr++;
 173   1          FLASHCON = 0;
 174   1      }
 175          
 176          
C51 COMPILER V9.54   EEPROM                                                                08/31/2022 15:02:56 PAGE 4   

 177          /***************************
 178           * 
 179           * 读写 PAGE2
 180           */
 181          void write_e3_bytes(u8 * src, u8 len)
 182          {
 183   1          eeprom.write_cmd = EEPROM_CMD;
 184   1          eeprom_erase(EEPROM_PAGE2);
 185   1      
 186   1          eeprom.write_cmd = EEPROM_CMD;
 187   1          eeprom_write(src, len, EEPROM_PAGE2*SECTOR_BYTE+0); 
 188   1      }
 189          
 190          void read_e3_bytes(u8 * dst, u8 len)
 191          {
 192   1          u8 j;
 193   1      
 194   1          u8 crom * ptr  = (u8 crom *)(EEPROM_PAGE2*SECTOR_BYTE+0);
 195   1      
 196   1          FLASHCON = 1;
 197   1          for (j = 0; j < len; j++)
 198   1              *dst++ = *ptr++;
 199   1          FLASHCON = 0;
 200   1      }
 201          //CRC8 初始值00，原记录：a5 00 03 00 01 5b，新加两变量，第一次读 a5 00 03 00 01 5b 00 0
             -0，CRC8刚好为00!!!
 202          
 203          
 204          
 205          
 206          
 207          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    650    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      6      22
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
